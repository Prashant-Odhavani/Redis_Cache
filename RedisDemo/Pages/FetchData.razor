@page "/fetchdata"
@using RedisDemo.Data
@using RedisDemo.Extensions
@inject WeatherForecastService ForecastService
@inject IDistributedCache Cache
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button class="btn btn-primary" @onclick="LoadForeCast">Load Forecast</button>
@if (forecasts is null && loadLocation == "")
{
    <p><em>Click the button to load the forecast</em></p>
}
else if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @isCachedData">@loadLocation</div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string loadLocation = "";
    private string isCachedData = "";


    private async Task LoadForeCast()
    {

        string recordKey = "WeatherForecast_" + DateTime.Now.ToString("yyyMMdd_hhmm");

        var cachData = await Cache.GetRecordAsync<WeatherForecast[]>(recordKey);
        if (cachData is null)
        {
            forecasts = ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
            await Cache.setRecordAsync(recordKey, forecasts);

            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCachedData = "";

        }
        else
        {
            forecasts = cachData;
            loadLocation = $"Loaded from cache at {DateTime.Now}";
            isCachedData = "text-danger";
        }
    }
}
